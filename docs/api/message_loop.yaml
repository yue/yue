name: MessageLoop
component: gui
header: nativeui/message_loop.h
type: class
namespace: nu
description: Post events to main GUI message loop.
detail: |
  Depending on the runtime you use, Yue may or may not provide this API.

  Note that `MessageLoop` is a class instead of an instance, the APIs are
  provided as class methods. This is because the `MessageLoop` does not manage
  message loop, it just provides wrappers of system GUI message loop APIs.

lang_detail:
  cpp: |
    If you are using Yue in an environment that does not have its own event
    loop, you should use this API to enter message loop.

    ```cpp
    nu::MessageLoop::Run();
    ```

  lua: |
    This class can not be created by user, you can only call its class methods.

    ```lua
    local gui = require('yue.gui')
    gui.MessageLoop.run()
    ```

  js: |
    This class can not be created by user, you can only call its class methods.

    ```js
    const gui = require('gui')
    gui.MessageLoop.run()
    ```

class_methods:
  - signature: void Run()
    description: Enter GUI message loop.

  - signature: void Quit()
    description: Quit current message loop.

  - signature: void PostTask(std::function<void()> task)
    description: Post a `task` to main thread's message loop.

  - signature: void PostDelayedTask(int ms, std::function<void()> task);
    description: |
      Post a `task` to main thread's message loop and execute it after `ms`.
    parameters:
      ms:
        description: The number of milliseconds to wait

  - signature: void SetTimer(int ms, std::function<bool()> task);
    description: |
      Enqueue a task `task` to be run multiple times on the main thread's message loop, delaying every `ms` miliseconds, and stopping if the task returns `false`
    parameters:
      ms:
        description: The number of milliseconds to wait


