name: Browser
component: gui
header: nativeui/browser.h
type: refcounted
namespace: nu
inherit: View
description: Native webview using system browser.
detail: |
  Using `Browser` requires relatively new operating systems, for macOS the
  minimum version required is 10.10, for Linux it is required to install the
  `webkit2gtk` library with at least version 2.8.

  On Linux due to poor support of hardware acceleration, the browser may fail to
  show anything, when that happens you can set `WEBKIT_DISABLE_COMPOSITING_MODE`
  environment variable to disable hardware acceleration.

constructors:
  - signature: Browser(const Browser::Options& options)
    lang: ['cpp']
    description: Create a new browser view.

class_methods:
  - signature: Browser* Create(Browser::Options options)
    lang: ['lua', 'js']
    description: Create a new browser view.

  - signature: bool RegisterProtocol(const std::string& scheme, const std::function<ProtocolJob*(const std::string&)>& handler)
    description: Register a custom protocol with `scheme` and `handler`.
    detail: |
      When the browser sends a request with `scheme`, the `handler` will be
      called with `handler(url)`, and the `handler` must return an instance of
      class that inherits from [`ProtocolJob`](./protocoljob.html).

      The `handler` is guaranteed to be called in the main thread.

  - signature: void UnregisterProtocol(const std::string& scheme);
    description: Unregister the custom protocol with `scheme`.

class_properties:
  - property: const char* kClassName
    lang: ['cpp']
    description: The class name of this view.

methods:
  - signature: void LoadURL(const std::string& url)
    description: Load the URL.

  - signature: void LoadHTML(const std::string& html, const std::string& baseurl)
    description: Set the webpage contents and base URL.
    parameters:
      html:
        description: The string to use as the contents of the webpage.
      baseurl:
        description: A URL used to resolve relative URLs within the document.

  - signature: std::string GetURL()
    description: Return current URL.

  - signature: std::string GetTitle()
    description: Return the title of document.

  - signature: void SetUserAgent(const std::string& user_agent)
    description: Change browser's user agent.
    detail: |
      On Windows, due to Internet Explorer's limitations, calling `SetUserAgent`
      would change all web pages' user agents in current process.

  - signature: void ExecuteJavaScript(const std::string& code, const std::function<void(bool, base::Value)>& callback);
    description: Evaluate `code` in browser and get the evaluated result.
    detail: |
      The `callback` will be called with `callback(success, result)`, the
      `result` argument is a generic value that created from the result of
      `code`.

      Note that due to limitations of system toolkits, the execution may fail if
      the result of `code` can not be fully converted to JSON.

  - signature: void GoBack()
    description: Navigate to the back item in the back-forward list.

  - signature: bool CanGoBack() const
    description: |
      Return whether there is a back item in the back-forward list that can be
      navigated to.

  - signature: void GoForward()
    description: Navigate to the forward item in the back-forward list.

  - signature: bool CanGoForward() const
    description: |
      Return whether there is a forward item in the back-forward list that can
      be navigated to.

  - signature: void Reload()
    description: Reload current page.

  - signature: void Stop()
    description: Stop loading all resources on the current page.

  - signature: bool IsLoading() const
    description: Return whether current page is loading content.

  - signature: void SetBindingName(const std::string& name)
    description: Set the `name` of object which would have the native bindings.
    detail: |
      By default native bindings are added to the `window` object, by calling
      this API, native bindings will be added to the `window[name]` object.

  - signature: void AddBinding(const std::string& name, const Function& func)
    lang: ['lua', 'js']
    description: Add a native binding to web page with `name`.
    detail: |
      The `func` will be called with automatically converted arguments.

  - signature: void AddBinding(const std::string& name, const std::function<void(...)>& func)
    lang: ['cpp']
    description: Add a native binding to web page with `name`.
    detail: |
      You can pass an arbitrary function as long as the parameters can be
      converted from `base::Value`, othewise compilation error would happen.

      For example, following native binding:

      ```cpp
      browser->AddBinding("AddRecord", [](const std::string&key, int value) {
      });
      ```

      accepts following calls:

      ```
      window.addRecord('Books', 4);
      window.addRecord('Videos', 8);
      ```

      You can also use `base::Value` directly to accept arbitrary argument:

      ```cpp
      browser->AddBinding("AddRecord2", [](const std::string&key, base::Value value) {
      })
      ```

      ```
      window.addRecord2('PI', 3.14);
      window.addRecord2('The Best Animal', 'Panda');
      ```

      Note that only functors, function pointers, `std::function` and
      captureless labmda functions are accepted in `AddBinding`. Labmda
      functions with captures can not have their types deduced automatically, so
      you have to convert them to `std::function` first .

  - signature: void AddRawBinding(const std::string& name, const std::function<void(Browser*, base::Value)>& func)
    description: Add a raw handler to web page with `name`.
    detail: |
      The `func` will be called with a list of arguments passed from JavaScript.

  - signature: void RemoveBinding(const std::string& name)
    description: Remove the native binding with `name`.

events:
  - callback: void on_close(Browser* self)
    description: Emitted when the web page requests to close.

  - callback: void on_update_command(Browser* self)
    description: Emitted when the back-forward list has changed.

  - callback: void on_change_loading(Browser* self)
    description: Emitted when the browser starts or stops loading content.

  - callback: void on_update_title(Browser* self, const std::string& title)
    description: Emitted when document's title is changed.

  - callback: void on_start_navigation(Browser* self, const std::string& url)
    description: Emitted when the browser begins provisional navigation.

  - callback: void on_commit_navigation(Browser* self, const std::string& url)
    description: Emitted when the browser begins to receive web content.

  - callback: void on_finish_navigation(Browser* self, const std::string& url)
    description: Emitted when the navigation is complete.

  - callback: void on_fail_navigation(Browser* self, const std::string& url, int code)
    description: Emitted when the navigation fails.

  - callback: bool on_create_new_browser(Browser* self, const std::string& url)
    description: Emitted when the web page requests to create new browser. Return whether to prevent the operating system from creating a browser.
